/**
 * 这里是uni-app内置的常用样式变量
 *
 * uni-app 官方扩展插件及插件市场（https://ext.dcloud.net.cn）上很多三方插件均使用了这些样式变量
 * 如果你是插件开发者，建议你使用scss预处理，并在插件代码中直接使用这些变量（无需 import 这个文件），方便用户通过搭积木的方式开发整体风格一致的App
 *
 */

/**
 * 如果你是App开发者（插件使用者），你可以通过修改这些变量来定制自己的插件主题，实现自定义主题功能
 *
 * 如果你的项目同样使用了scss预处理，你也可以直接在你的 scss 代码中使用如下变量，同时无需 import 这个文件
 */

/* 颜色变量 */

/* 行为相关颜色 */
$uni-color-primary: #007aff;
$uni-color-success: #4cd964;
$uni-color-warning: #f0ad4e;
$uni-color-error: #dd524d;

/* 文字基本颜色 */
$uni-text-color:#333;//基本色
$uni-text-color-inverse:#fff;//反色
$uni-text-color-grey:#999;//辅助灰色，如加载更多的提示信息
$uni-text-color-placeholder: #808080;
$uni-text-color-disable:#c0c0c0;

/* 背景颜色 */
$uni-bg-color:#ffffff;
$uni-bg-color-grey:#f8f8f8;
$uni-bg-color-hover:#f1f1f1;//点击状态颜色
$uni-bg-color-mask:rgba(0, 0, 0, 0.4);//遮罩颜色

/* 边框颜色 */
$uni-border-color:#c8c7cc;

/* 尺寸变量 */

/* 文字尺寸 */
$uni-font-size-sm:24upx;
$uni-font-size-base:28upx;
$uni-font-size-lg:32upx;

/* 图片尺寸 */
$uni-img-size-sm:40upx;
$uni-img-size-base:52upx;
$uni-img-size-lg:80upx;

/* Border Radius */
$uni-border-radius-sm: 4upx;
$uni-border-radius-base: 6upx;
$uni-border-radius-lg: 12upx;
$uni-border-radius-circle: 50%;

/* 水平间距 */
$uni-spacing-row-sm: 10px;
$uni-spacing-row-base: 20upx;
$uni-spacing-row-lg: 30upx;

/* 垂直间距 */
$uni-spacing-col-sm: 8upx;
$uni-spacing-col-base: 16upx;
$uni-spacing-col-lg: 24upx;

/* 透明度 */
$uni-opacity-disabled: 0.3; // 组件禁用态的透明度

/* 文章场景相关 */
$uni-color-title: #2C405A; // 文章标题颜色
$uni-font-size-title:40upx;
$uni-color-subtitle: #555555; // 二级标题颜色
$uni-font-size-subtitle:36upx;
$uni-color-paragraph: #3F536E; // 文章段落颜色
$uni-font-size-paragraph:30upx;

/*------------- 我自己的全局变量、混合、方法 -------------*/
/*----- 全局变量 -----*/
$me-color-adjust-tolerance: 15;              // 颜色调整容差：0-255
$me-color-adjust-filter: null;               // 颜色调整列表：color1, color2, color3, ...
$me-color-replace: null;                     // 颜色替换列表：(replaceColor:newColor, replaceColor:newColor, ...)
$me-page-bg-color: #F1F2F4;                  // 页面背景色
$me-init-unit: 1upx;                         // 初始单位

/*----- 混合 -----*/
@mixin flex-align($justify: null, $align: null, $multiline: false) {
    display: flex;
    @if $justify != null {
        justify-content: $justify;
    }
    @if $multiline == true {
        @if $align != null {
            align-items: $align;
            align-content: $align;
        }
    } @else {
        @if $align != null {
            align-items: $align;
        }
    }
}
@mixin border($direction, $style: 0 none) {
    @each $val in $direction {
        @if $val == top {
            border-top: $style;
        } @else if $val == right {
            border-right: $style;
        } @else if $val == bottom {
            border-bottom: $style;
        } @else if $val == left {
            border-left: $style;
        }
    }
}
@mixin border-radius($direction, $radius: 0) {
    @if $direction == top {
        border-top-right-radius: $radius;
        border-top-left-radius: $radius;
    } @else if $direction == right {
        border-bottom-right-radius: $radius;
        border-top-right-radius: $radius;
    } @else if $direction == bottom {
        border-bottom-right-radius: $radius;
        border-bottom-left-radius: $radius;
    } @else if $direction == left {
        border-bottom-left-radius: $radius;
        border-top-left-radius: $radius;
    }
}
@mixin text-overflow($line-number: 1, $line-height: null) {
    @if $line-number == 1 {
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $line-number;
        -webkit-box-orient: vertical;
    }
    @if $line-height != null {
        max-height: $line-height * $line-number;
    }
    overflow: hidden;
    text-overflow: ellipsis;
}
@mixin size($width: null, $height: null, $widthUnit: $me-init-unit, $heightUnit: $me-init-unit) {
    @if $width != null {
        @if $widthUnit != null {
            width: $width * $widthUnit;
        } @else {
            width: $width;
        }
    }
    @if $height != null {
        @if $heightUnit != null {
            height: $height * $heightUnit;
        } @else {
            height: $height;
        }
    }
}
@mixin syxz($top: null, $right: null, $bottom: null, $left: null, $topUnit: $me-init-unit, $rightUnit: $me-init-unit, $bottomUnit: $me-init-unit, $leftUnit: $me-init-unit) {
    @if $top != null {
        @if $topUnit != null {
            top: $top * $topUnit;
        } @else {
            top: $top;
        }
    }
    @if $right != null {
        @if $rightUnit != null {
            right: $right * $rightUnit;
        } @else {
            right: $right;
        }
    }
    @if $bottom != null {
        @if $bottomUnit != null {
            bottom: $bottom * $bottomUnit;
        } @else {
            bottom: $bottom;
        }
    }
    @if $left != null {
        @if $leftUnit != null {
            left: $left * $leftUnit;
        } @else {
            left: $left;
        }
    }
}
@mixin font-stroke($fontSize: null, $color: null, $strokeColor: null, $strokeWidth: 1px, $strokeType: shadow) {
    font-size: $fontSize;
    color: $color;
    @if $strokeType == shadow {
        $shadow: 0 0 $strokeWidth $strokeColor;
        text-shadow: $shadow, $shadow, $shadow, $shadow, $shadow,
                     $shadow, $shadow, $shadow, $shadow, $shadow,
                     $shadow, $shadow, $shadow, $shadow, $shadow,
                     $shadow, $shadow, $shadow, $shadow, $shadow;
    } @else {
        font-weight: bold;
        -webkit-text-fill-color: $color;
        -webkit-text-stroke: $strokeWidth $strokeColor;
    }
}

/*----- 方法 -----*/
@function asb($val){
    @return if($val < 0, -$val, $val);
}
@function c($color, $isReplace: true){
    @if $me-color-adjust-filter != null {
        $r: red($color);
        $g: green($color);
        $b: blue($color);
        @each $val in $me-color-adjust-filter {
            $valR: red($val);
            $valG: green($val);
            $valB: blue($val);
            @if asb($r - $valR) <= $me-color-adjust-tolerance and asb($g - $valG) <= $me-color-adjust-tolerance and asb($b - $valB) <= $me-color-adjust-tolerance {
                $color: $val;
            }
        }
    }
    @if $isReplace and $me-color-replace != null {
        @each $key, $val in $me-color-replace {
            @if $color == $key {
                $color: $val;
            }
        }
    }
    @return $color;
}
